/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

   // id 'net.minecrell.licenser' version '0.3'
  //  id "com.github.sherter.google-java-format" version "0.6"
    id "net.ltgt.errorprone" version "0.0.13"
}

//googleJavaFormat {
//    toolVersion '1.5'
//    include '**/*.java'
//    exclude '**/generated-sources/*'
//}

description = """Java Cadence workflow samples"""

apply plugin: 'java'
apply plugin: 'maven'


repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
}

group = 'com.github.rajeshbr'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


dependencies {
    compile group: 'com.uber.cadence', name: 'cadence-client', version: '2.2.0'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.9'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.3'
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.github.rajeshbr.cadence.howto.App'
    }
    baseName = 'all-in-one-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//compileJava {
//    dependsOn 'googleJavaFormat'
//    options.encoding = 'UTF-8'
//    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XepExcludedPaths:" +
//            ".*/generated-sources/.*"
//}

task execute(type: JavaExec) {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    main = findProperty("mainClass") ?: ""
    classpath = sourceSets.main.runtimeClasspath
}

//license {
//    header rootProject.file('license-header.txt')
//}

// Define the main class for the application
mainClassName = 'com.github.rajeshbr.cadence.howto.App'
